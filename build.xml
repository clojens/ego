<project name="ego" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Generic git command wrapper -->
  <macrodef name = "git">
    <attribute name = "command" />
    <attribute name = "dir" default = "" />
    <element name = "args" optional = "true" />
    <sequential>
      <echo message = "git @{command}" />
      <exec executable = "git" dir = "@{dir}">
        <arg value = "@{command}" />
        <args/>
      </exec>
    </sequential>
  </macrodef>

  <!-- Generic git updating tool -->
  <macrodef name = "git-clone-pull">
    <attribute name = "repository" />
    <attribute name = "dest" />
    <sequential>
      <git command = "clone">
        <args>
          <arg value = "@{repository}" />
          <arg value = "@{dest}" />
        </args>
      </git>
      <git command = "pull" dir = "@{dest}" />
    </sequential>
  </macrodef>
 
  <property name="ivy.install.version" value="2.0.0-beta1"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="ivy.dep" value="lib/default"/>
  <property name="git.deps" value="opt" />
  <property name="build" value="build"/>
  <property name="src" value="src"/>
  <property name="test" value="test"/>
  <property name="dist" value="dist"/>

  <path id="ego.classpath">
    <fileset dir="lib">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="src"/>
    <pathelement location="build"/>
    <pathelement location="test"/>
  </path>

  <!-- Dependencies -->
  
  <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <echo message="installing ivy..."/>
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="update" depends="install-ivy" description="Download project dependencies">
    <ivy:settings file="ivysettings.xml" />
    <ivy:retrieve pattern="${basedir}/lib/[artifact].[ext]" />
    <ivy:cachepath pathid="ivy.classpath" />
  </target>

  <target name="deps" depends="update" description="Check out, compile and dist git deps">
    <mkdir dir="${git.deps}" />

    <!-- Compojure -->
    <git-clone-pull repository="git://github.com/weavejester/compojure.git" dest="${git.deps}/compojure" />
    <ant dir="${git.deps}/compojure" inheritAll="false" target="deps"/>
    <ant dir="${git.deps}/compojure" inheritAll="false" />
    <copy file="${git.deps}/compojure/compojure.jar" todir="lib" />
    <delete file="${git.deps}/compojure/deps/clojure.jar" />
    <delete file="${git.deps}/compojure/deps/clojure-contrib.jar" />
    <copy includeemptydirs="false" todir="lib">
      <fileset dir="${git.deps}/compojure/deps"/>
    </copy>
  </target>

  <!-- Clean -->

  <target name="clean" description="--> clean the project">
    <delete includeemptydirs="true" >
       <fileset dir="${build}"/>
    </delete>
    <delete dir="${dist}"/>
  </target>
  
  <target name="clean-deps" depends="install-ivy" description="--> clean the ivy cache">
    <ivy:cleancache/>
    <delete dir="${ivy.jar.dir}"/>
    <delete dir="lib"/>
    <delete dir="opt" />
  </target>

  <!-- Build -->

  <target name="init">
    <tstamp/>
    <mkdir dir="${build}"/>
  </target>
 
  <target name="manifest">
  <manifest file="${build}/MANIFEST.MF">
    <attribute name="Built-By" value="Andrew Stein"/>
    <attribute name="Main-Class" value="org.ego"/>
    <attribute name="Class-Path" value="clojure-lang.jar clojure-contrib.jar log4j.jar postgresql.jar commons-codec.jar netty.jar" />
  </manifest>
  </target>
 
  <target name="compile_java" depends="init" description="compile the source ">
    <javac srcdir="${src}" destdir="${build}">
      <classpath refid="ego.classpath"/>
    </javac>
  </target>

  <target name="test" description="Test Clojure sources.">
    <java classname="clojure.main" fork="true">
      <classpath refid="ego.classpath" />
      <arg value="test/org/ego_test.clj"/>
    </java>
  </target>
 
  <target name="compile" depends="init, compile_java" description="Compile Clojure sources.">
     <java classname="clojure.lang.Compile" fork="true">
      <classpath refid="ego.classpath" />
      <sysproperty key="clojure.compile.path" value="${build}"/>
      <arg value="org.ego.core.common"/>
      <arg value="org.ego.core.accounts"/>
      <arg value="org.ego.xmpp.server"/>
      <arg value="org.ego.xmpp.xmpp"/>
      <arg value="org.ego.xmpp.xml"/>
      <arg value="org.ego.xmpp.stanza"/>
      <arg value="org.ego.xmpp.iq"/>
      <arg value="org.ego.xmpp.message"/>
      <arg value="org.ego.xmpp.stream"/>
      <arg value="org.ego"/>
    </java>
    
  </target>
 
 <target name="dist" depends="compile, test, manifest" description="generate the distribution" >
    <mkdir dir="${dist}/lib"/>
    <jar manifest="${build}/MANIFEST.MF" jarfile="${dist}/lib/ego.jar" basedir="${build}"/>
    <copy includeemptydirs="false" todir="${dist}/lib">
      <fileset dir="lib"/>
    </copy>
    <copy file="${src}/ego.properties" todir="${dist}/lib" />
    <copy file="${src}/log4j.properties" todir="${dist}/lib" />
    <copy file="${src}/ego.jks" todir="${dist}/lib" />
  </target>
</project>
